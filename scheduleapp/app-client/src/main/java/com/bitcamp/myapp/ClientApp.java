/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.bitcamp.myapp;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import com.bitcamp.myapp.dao.BoardDao;
import com.bitcamp.myapp.dao.BoardNetworkDao;
import com.bitcamp.myapp.dao.ScheduleDao;
import com.bitcamp.myapp.dao.ScheduleNetworkDao;
import com.bitcamp.myapp.handler.BoardAddListener;
import com.bitcamp.myapp.handler.BoardDeleteListener;
import com.bitcamp.myapp.handler.BoardDetailListener;
import com.bitcamp.myapp.handler.BoardListListener;
import com.bitcamp.myapp.handler.BoardUpdateListener;
import com.bitcamp.myapp.handler.FooterListener;
import com.bitcamp.myapp.handler.HeaderListener;
import com.bitcamp.myapp.handler.HelloListener;
import com.bitcamp.myapp.handler.ScheduleAddListener;
import com.bitcamp.myapp.handler.ScheduleDeleteListener;
import com.bitcamp.myapp.handler.ScheduleListListener;
import com.bitcamp.myapp.handler.ScheduleSearchListener;
import com.bitcamp.myapp.handler.ScheduleUpdateListener;
import com.bitcamp.net.RequestEntity;
import com.bitcamp.util.BreadcrumbPrompt;
import com.bitcamp.util.Menu;
import com.bitcamp.util.MenuGroup;

public class ClientApp {
  Socket socket;
  DataOutputStream out;
  DataInputStream in;

  ScheduleDao scheduleDao;
  BoardDao boardDao;
  BoardDao readingDao;

  BreadcrumbPrompt prompt = new BreadcrumbPrompt();

  MenuGroup mainMenu = new MenuGroup("메인");

  public ClientApp(String ip, int port) throws Exception {
    this.socket = new Socket(ip, port);
    this.out = new DataOutputStream(socket.getOutputStream());
    this.in = new DataInputStream(socket.getInputStream());

    this.scheduleDao = new ScheduleNetworkDao("schedule", in, out);
    this.boardDao = new BoardNetworkDao("board", in, out);
    this.readingDao = new BoardNetworkDao("reading", in, out);
    prepareMenu();
  }

  public void close() throws Exception {
    prompt.close();
    out.close();
    in.close();
    socket.close();
  }

  public static void main(String[] args) throws Exception {
    ClientApp app = new ClientApp(args[0], Integer.parseInt(args[1]));
    app.execute();
    app.close();
  }

  static void printTitle() {
    System.out.println("스케줄 관리 애플리케이션");
    System.out.println("----------------------------------");
  }

  static String getMenu() {
    StringBuilder menu = new StringBuilder();
    menu.append("1. 스케줄\n");
    menu.append("2. 게시글\n");
    menu.append("0. 종료\n");

    return menu.toString();
  }

  public void execute() {

    printTitle();
    mainMenu.execute(prompt);

    try {
      out.writeUTF(new RequestEntity().command("quit").toJson());
    } catch (Exception e) {
      System.out.println("종료 오류");
      e.printStackTrace();
    }
  }

  private void prepareMenu() {
    MenuGroup memberMenu = new MenuGroup("스케줄");
    memberMenu.add(new Menu("등록", new ScheduleAddListener(scheduleDao)));
    memberMenu.add(new Menu("목록", new ScheduleListListener(scheduleDao)));
    memberMenu.add(new Menu("검색", new ScheduleSearchListener(scheduleDao)));
    memberMenu.add(new Menu("변경", new ScheduleUpdateListener(scheduleDao)));
    memberMenu.add(new Menu("삭제", new ScheduleDeleteListener(scheduleDao)));
    mainMenu.add(memberMenu);


    MenuGroup boardMenu = new MenuGroup("게시글");
    boardMenu.add(new Menu("등록", new BoardAddListener(boardDao)));
    boardMenu.add(new Menu("목록", new BoardListListener(boardDao)));
    boardMenu.add(new Menu("조회", new BoardDetailListener(boardDao)));
    boardMenu.add(new Menu("변경", new BoardUpdateListener(boardDao)));
    boardMenu.add(new Menu("삭제", new BoardDeleteListener(boardDao)));
    mainMenu.add(boardMenu);

    MenuGroup readingMenu = new MenuGroup("독서록");
    readingMenu.add(new Menu("등록", new BoardAddListener(readingDao)));
    readingMenu.add(new Menu("목록", new BoardListListener(readingDao)));
    readingMenu.add(new Menu("조회", new BoardDetailListener(readingDao)));
    readingMenu.add(new Menu("변경", new BoardUpdateListener(readingDao)));
    readingMenu.add(new Menu("삭제", new BoardDeleteListener(readingDao)));
    mainMenu.add(readingMenu);

    Menu helloMenu = new Menu("안녕!");
    helloMenu.addActionListener(new HeaderListener());
    helloMenu.addActionListener(new HelloListener());
    helloMenu.addActionListener(new FooterListener());
    mainMenu.add(helloMenu);
  }

}
