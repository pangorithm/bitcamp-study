/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.bitcamp.myapp;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import com.bitcamp.io.BufferedDataInputStream;
import com.bitcamp.io.BufferedDataOutputStream;
import com.bitcamp.myapp.handler.BoardAddListener;
import com.bitcamp.myapp.handler.BoardDeleteListener;
import com.bitcamp.myapp.handler.BoardDetailListener;
import com.bitcamp.myapp.handler.BoardListListener;
import com.bitcamp.myapp.handler.BoardUpdateListener;
import com.bitcamp.myapp.handler.FooterListener;
import com.bitcamp.myapp.handler.HeaderListener;
import com.bitcamp.myapp.handler.HelloListener;
import com.bitcamp.myapp.handler.ScheduleAddListener;
import com.bitcamp.myapp.handler.ScheduleDeleteListener;
import com.bitcamp.myapp.handler.ScheduleListListener;
import com.bitcamp.myapp.handler.ScheduleSearchListener;
import com.bitcamp.myapp.handler.ScheduleUpdateListener;
import com.bitcamp.myapp.vo.Board;
import com.bitcamp.myapp.vo.Schedule;
import com.bitcamp.util.BreadcrumbPrompt;
import com.bitcamp.util.Menu;
import com.bitcamp.util.MenuGroup;

public class App {

  ArrayList<Schedule> scheduleList = new ArrayList<>();
  LinkedList<Board> boardList = new LinkedList<>();
  LinkedList<Board> readingList = new LinkedList<>();

  BreadcrumbPrompt prompt = new BreadcrumbPrompt();

  MenuGroup mainMenu = new MenuGroup("메인");

  public App() {
    prepareMenu();
  }

  public static void main(String[] args) {
    new App().execute();
  }

  static void printTitle() {
    System.out.println("스케줄 관리 애플리케이션");
    System.out.println("----------------------------------");
  }

  static String getMenu() {
    StringBuilder menu = new StringBuilder();
    menu.append("1. 스케줄\n");
    menu.append("2. 게시글\n");
    menu.append("0. 종료\n");

    return menu.toString();
  }

  public void execute() {

    printTitle();
    loadData();
    mainMenu.execute(prompt);
    saveData();
    prompt.close();
  }

  private void prepareMenu() {
    MenuGroup memberMenu = new MenuGroup("스캐줄");
    memberMenu.add(new Menu("등록", new ScheduleAddListener(scheduleList)));
    memberMenu.add(new Menu("목록", new ScheduleListListener(scheduleList)));
    memberMenu.add(new Menu("검색", new ScheduleSearchListener(scheduleList)));
    memberMenu.add(new Menu("변경", new ScheduleUpdateListener(scheduleList)));
    memberMenu.add(new Menu("삭제", new ScheduleDeleteListener(scheduleList)));
    mainMenu.add(memberMenu);


    MenuGroup boardMenu = new MenuGroup("게시글");
    boardMenu.add(new Menu("등록", new BoardAddListener(boardList)));
    boardMenu.add(new Menu("목록", new BoardListListener(boardList)));
    boardMenu.add(new Menu("조회", new BoardDetailListener(boardList)));
    boardMenu.add(new Menu("변경", new BoardUpdateListener(boardList)));
    boardMenu.add(new Menu("삭제", new BoardDeleteListener(boardList)));
    mainMenu.add(boardMenu);

    MenuGroup readingMenu = new MenuGroup("독서록");
    readingMenu.add(new Menu("등록", new BoardAddListener(readingList)));
    readingMenu.add(new Menu("목록", new BoardListListener(readingList)));
    readingMenu.add(new Menu("조회", new BoardDetailListener(readingList)));
    readingMenu.add(new Menu("변경", new BoardUpdateListener(readingList)));
    readingMenu.add(new Menu("삭제", new BoardDeleteListener(readingList)));
    mainMenu.add(readingMenu);

    // Handler memberHandler = new MemberHandler(prompt, "회원", new ArrayList());
    // Handler boardHandler = new BoardDeleteListener(prompt, "게시글", new LinkedList());
    // Handler readingHandler = new BoardDeleteListener(prompt, "독서록", new LinkedList());

    Menu helloMenu = new Menu("안녕!");
    helloMenu.addActionListener(new HeaderListener());
    helloMenu.addActionListener(new HelloListener());
    helloMenu.addActionListener(new FooterListener());
    mainMenu.add(helloMenu);
  }

  public void loadData() {
    loadSchedule("schedule.data", scheduleList);
    loadBoard("board.data", boardList);
    loadBoard("reading.data", readingList);
  }

  public void saveData() {
    saveSchedule("schedule.data", scheduleList);
    saveBoard("board.data", boardList);
    saveBoard("reading.data", readingList);
  }

  public void loadSchedule(String fileName, List<Schedule> list) {
    try {
      BufferedDataInputStream in = new BufferedDataInputStream(fileName);

      int size = in.readShort();

      for (int i = 0; i < size; i++) {
        Schedule schedule = new Schedule();

        schedule.setNo(in.readInt());

        schedule.setScheduleTitle(in.readUTF());

        schedule.setStartTime(in.readLong());

        schedule.setEndTime(in.readLong());

        list.add(schedule);
      }

      Schedule.scheduleId = Math.max(Schedule.scheduleId, list.get(list.size() - 1).getNo() + 1);

      in.close();

    } catch (Exception e) {
      System.out.println(fileName + "파일을 읽는 중 오류 발생");
    }
  }


  private void loadBoard(String filename, List<Board> list) {
    try {
      BufferedDataInputStream in = new BufferedDataInputStream(filename);

      int size = in.readShort();

      for (int i = 0; i < size; i++) {
        Board board = new Board();
        board.setNo(in.readInt());

        board.setTitle(in.readUTF());

        board.setContent(in.readUTF());

        board.setWriter(in.readUTF());

        board.setPassword(in.readUTF());

        board.setViewCount(in.readInt());

        board.setCreatedDate(in.readLong());

        list.add(board);
      }

      Board.boardId = Math.max(Board.boardId, list.get(list.size() - 1).getNo() + 1);

      in.close();

    } catch (Exception e) {
      System.out.println(filename + " 파일을 읽는 중 오류 발생!");
    }
  }

  public void saveSchedule(String fileName, List<Schedule> list) {
    try {
      BufferedDataOutputStream out = new BufferedDataOutputStream(fileName);

      out.writeShort(list.size());

      for (Schedule schedule : list) {

        out.writeInt(schedule.getNo());

        out.writeUTF(schedule.getScheduleTitle());

        out.writeLong(schedule.getStartTime());

        out.writeLong(schedule.getEndTime());

      }


      out.close();
    } catch (Exception e) {
      System.out.println(fileName + "파일 저장 중 오류 발생");
    }
  }


  private void saveBoard(String filename, List<Board> list) {
    try {
      BufferedDataOutputStream out = new BufferedDataOutputStream(filename);

      out.writeShort(list.size());

      for (Board board : list) {
        out.writeInt(board.getNo());

        out.writeUTF(board.getTitle());


        out.writeUTF(board.getContent());

        out.writeUTF(board.getWriter());

        out.writeUTF(board.getPassword());

        out.writeInt(board.getViewCount());

        out.writeLong(board.getCreatedDate());
      }
      out.close();

    } catch (Exception e) {
      System.out.println(filename + " 파일을 저장하는 중 오류 발생!");
    }
  }

}
