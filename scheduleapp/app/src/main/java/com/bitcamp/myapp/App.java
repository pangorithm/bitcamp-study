/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.bitcamp.myapp;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import com.bitcamp.myapp.handler.BoardAddListener;
import com.bitcamp.myapp.handler.BoardDeleteListener;
import com.bitcamp.myapp.handler.BoardDetailListener;
import com.bitcamp.myapp.handler.BoardListListener;
import com.bitcamp.myapp.handler.BoardUpdateListener;
import com.bitcamp.myapp.handler.FooterListener;
import com.bitcamp.myapp.handler.HeaderListener;
import com.bitcamp.myapp.handler.HelloListener;
import com.bitcamp.myapp.handler.ScheduleAddListener;
import com.bitcamp.myapp.handler.ScheduleDeleteListener;
import com.bitcamp.myapp.handler.ScheduleListListener;
import com.bitcamp.myapp.handler.ScheduleSearchListener;
import com.bitcamp.myapp.handler.ScheduleUpdateListener;
import com.bitcamp.myapp.vo.Board;
import com.bitcamp.myapp.vo.Schedule;
import com.bitcamp.util.BreadcrumbPrompt;
import com.bitcamp.util.Menu;
import com.bitcamp.util.MenuGroup;

public class App {

  ArrayList<Schedule> scheduleList = new ArrayList<>();
  LinkedList<Board> boardList = new LinkedList<>();
  LinkedList<Board> readingList = new LinkedList<>();

  BreadcrumbPrompt prompt = new BreadcrumbPrompt();

  MenuGroup mainMenu = new MenuGroup("메인");

  public App() {
    prepareMenu();
  }

  public static void main(String[] args) {
    new App().execute();
  }

  static void printTitle() {
    System.out.println("스케줄 관리 애플리케이션");
    System.out.println("----------------------------------");
  }

  static String getMenu() {
    StringBuilder menu = new StringBuilder();
    menu.append("1. 스케줄\n");
    menu.append("2. 게시글\n");
    menu.append("0. 종료\n");

    return menu.toString();
  }

  public void execute() {

    printTitle();
    loadData();
    mainMenu.execute(prompt);
    saveData();
    prompt.close();
  }

  private void prepareMenu() {
    MenuGroup memberMenu = new MenuGroup("스캐줄");
    memberMenu.add(new Menu("등록", new ScheduleAddListener(scheduleList)));
    memberMenu.add(new Menu("목록", new ScheduleListListener(scheduleList)));
    memberMenu.add(new Menu("검색", new ScheduleSearchListener(scheduleList)));
    memberMenu.add(new Menu("변경", new ScheduleUpdateListener(scheduleList)));
    memberMenu.add(new Menu("삭제", new ScheduleDeleteListener(scheduleList)));
    mainMenu.add(memberMenu);


    MenuGroup boardMenu = new MenuGroup("게시글");
    boardMenu.add(new Menu("등록", new BoardAddListener(boardList)));
    boardMenu.add(new Menu("목록", new BoardListListener(boardList)));
    boardMenu.add(new Menu("조회", new BoardDetailListener(boardList)));
    boardMenu.add(new Menu("변경", new BoardUpdateListener(boardList)));
    boardMenu.add(new Menu("삭제", new BoardDeleteListener(boardList)));
    mainMenu.add(boardMenu);

    MenuGroup readingMenu = new MenuGroup("독서록");
    readingMenu.add(new Menu("등록", new BoardAddListener(readingList)));
    readingMenu.add(new Menu("목록", new BoardListListener(readingList)));
    readingMenu.add(new Menu("조회", new BoardDetailListener(readingList)));
    readingMenu.add(new Menu("변경", new BoardUpdateListener(readingList)));
    readingMenu.add(new Menu("삭제", new BoardDeleteListener(readingList)));
    mainMenu.add(readingMenu);

    // Handler memberHandler = new MemberHandler(prompt, "회원", new ArrayList());
    // Handler boardHandler = new BoardDeleteListener(prompt, "게시글", new LinkedList());
    // Handler readingHandler = new BoardDeleteListener(prompt, "독서록", new LinkedList());

    Menu helloMenu = new Menu("안녕!");
    helloMenu.addActionListener(new HeaderListener());
    helloMenu.addActionListener(new HelloListener());
    helloMenu.addActionListener(new FooterListener());
    mainMenu.add(helloMenu);
  }

  public void loadData() {
    loadSchedule("schedule.data", scheduleList);
    loadBoard("board.data", boardList);
    loadBoard("reading.data", readingList);
  }

  public void saveData() {
    saveSchedule("schedule.data", scheduleList);
    saveBoard("board.data", boardList);
    saveBoard("reading.data", readingList);
  }

  public void loadSchedule(String fileName, List<Schedule> list) {
    try {
      FileInputStream in = new FileInputStream(fileName);

      int size = in.read() << 8 | in.read();

      for (int i = 0; i < size; i++) {
        Schedule schedule = new Schedule();

        schedule.setNo(in.read() << 24 | in.read() << 16 | in.read() << 8 | in.read());

        int length = in.read() << 8 | in.read();
        byte[] buf = new byte[length];
        in.read(buf, 0, length);
        schedule.setScheduleTitle(new String(buf, "UTF-8"));

        schedule.setStartTime((long) in.read() << 56 | (long) in.read() << 48
            | (long) in.read() << 40 | (long) in.read() << 32 | (long) in.read() << 24
            | (long) in.read() << (long) 16 | (long) in.read() << 8 | in.read());

        schedule.setEndTime((long) in.read() << 56 | (long) in.read() << 48 | (long) in.read() << 40
            | (long) in.read() << 32 | (long) in.read() << 24 | (long) in.read() << 16
            | (long) in.read() << 8 | in.read());

        list.add(schedule);
      }

      Schedule.scheduleId = Math.max(Schedule.scheduleId, list.get(list.size() - 1).getNo() + 1);

      in.close();

    } catch (Exception e) {
      System.out.println(fileName + "파일을 읽는 중 오류 발생");
      System.out.println(e);
    }
  }


  private void loadBoard(String filename, List<Board> list) {
    try {
      FileInputStream in = new FileInputStream(filename);
      int size = in.read() << 8;
      size |= in.read();

      byte[] buf = new byte[1000];

      for (int i = 0; i < size; i++) {
        Board board = new Board();
        board.setNo(in.read() << 24 | in.read() << 16 | in.read() << 8 | in.read());

        int length = in.read() << 8 | in.read();
        in.read(buf, 0, length);
        board.setTitle(new String(buf, 0, length, "UTF-8"));

        length = in.read() << 8 | in.read();
        in.read(buf, 0, length);
        board.setContent(new String(buf, 0, length, "UTF-8"));

        length = in.read() << 8 | in.read();
        in.read(buf, 0, length);
        board.setWriter(new String(buf, 0, length, "UTF-8"));

        length = in.read() << 8 | in.read();
        in.read(buf, 0, length);
        board.setPassword(new String(buf, 0, length, "UTF-8"));

        board.setViewCount(in.read() << 24 | in.read() << 16 | in.read() << 8 | in.read());

        board.setCreatedDate((long) in.read() << 56 | (long) in.read() << 48
            | (long) in.read() << 40 | (long) in.read() << 32 | (long) in.read() << 24
            | (long) in.read() << 16 | (long) in.read() << 8 | in.read());

        list.add(board);
      }

      Board.boardId = Math.max(Board.boardId, list.get(list.size() - 1).getNo() + 1);

      in.close();

    } catch (Exception e) {
      System.out.println(filename + " 파일을 읽는 중 오류 발생!");
    }
  }

  public void saveSchedule(String fileName, List<Schedule> list) {
    try {
      FileOutputStream out = new FileOutputStream(fileName);

      int size = list.size();
      out.write(size >> 8);
      out.write(size);

      for (Schedule schedule : list) {

        int no = schedule.getNo();
        out.write(no >> 24);
        out.write(no >> 16);
        out.write(no >> 8);
        out.write(no);

        String title = schedule.getScheduleTitle();
        byte[] bytes = title.getBytes("UTF-8");
        int length = bytes.length;
        out.write(length >> 8);
        out.write(length);
        out.write(bytes);

        long startTime = schedule.getStartTime();
        out.write((int) (startTime >> 56));
        out.write((int) (startTime >> 48));
        out.write((int) (startTime >> 40));
        out.write((int) (startTime >> 32));
        out.write((int) (startTime >> 24));
        out.write((int) (startTime >> 16));
        out.write((int) (startTime >> 8));
        out.write((int) (startTime));

        long endTime = schedule.getEndTime();
        out.write((int) (endTime >> 56));
        out.write((int) (endTime >> 48));
        out.write((int) (endTime >> 40));
        out.write((int) (endTime >> 32));
        out.write((int) (endTime >> 24));
        out.write((int) (endTime >> 16));
        out.write((int) (endTime >> 8));
        out.write((int) (endTime));

      }


      out.close();
    } catch (Exception e) {
      System.out.println(fileName + "파일 저장 중 오류 발생");
    }
  }


  private void saveBoard(String filename, List<Board> list) {
    try {
      FileOutputStream out = new FileOutputStream(filename);

      // 저장할 데이터의 개수를 먼저 출력한다.
      int size = list.size();
      out.write(size >> 8);
      out.write(size);

      for (Board board : list) {
        int no = board.getNo();
        out.write(no >> 24);
        out.write(no >> 16);
        out.write(no >> 8);
        out.write(no);

        byte[] bytes = board.getTitle().getBytes("UTF-8");
        out.write(bytes.length >> 8);
        out.write(bytes.length);
        out.write(bytes);


        bytes = board.getContent().getBytes("UTF-8");
        out.write(bytes.length >> 8);
        out.write(bytes.length);
        out.write(bytes);

        bytes = board.getWriter().getBytes("UTF-8");
        out.write(bytes.length >> 8);
        out.write(bytes.length);
        out.write(bytes);

        bytes = board.getPassword().getBytes("UTF-8");
        out.write(bytes.length >> 8);
        out.write(bytes.length);
        out.write(bytes);

        int viewCount = board.getViewCount();
        out.write(viewCount >> 24);
        out.write(viewCount >> 16);
        out.write(viewCount >> 8);
        out.write(viewCount);

        long createdDate = board.getCreatedDate();
        out.write((int) (createdDate >> 56));
        out.write((int) (createdDate >> 48));
        out.write((int) (createdDate >> 40));
        out.write((int) (createdDate >> 32));
        out.write((int) (createdDate >> 24));
        out.write((int) (createdDate >> 16));
        out.write((int) (createdDate >> 8));
        out.write((int) createdDate);
      }
      out.close();

    } catch (Exception e) {
      System.out.println(filename + " 파일을 저장하는 중 오류 발생!");
    }
  }

}
